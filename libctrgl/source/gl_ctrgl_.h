/*
    Boost Software License - Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

#ifndef CTR_GL_C
#error This is a private CTRGL implementation file. Please use #include <gl.h> instead.
#endif

void ctrglInit(void)
{
    int i;

    alphaTestState.func = GL_ALWAYS;
    alphaTestState.ref = 0;

    blendState.blendColor = 0x00000000;
    blendState.dstAlpha = GL_ZERO;
    blendState.dstRGB = GL_ZERO;
    blendState.modeAlpha = GL_FUNC_ADD;
    blendState.modeRGB = GL_FUNC_ADD;
    blendState.srcAlpha = GL_ONE;
    blendState.srcRGB = GL_ONE;

    cullState.cullFace = GL_BACK;
    cullState.frontFace = GL_CCW;

    depthTestState.func = GL_LESS;
    depthTestState.mask = GL_TRUE;
    depthTestState.colorMask = 0x0f;

    matricesState.stereoMode = GL_STEREO_NONE_CTR;

    shaderState.program = NULL;

    stereoState.enabled = GL_FALSE;

    texturingState.activeTexture = 0;
    texturingState.enableTextures = 0;

    /* TODO: are these correct GL defaults? */
    texturingState.env[0].constant = 0xffffffff;
    texturingState.env[0].combineRGB = GL_MODULATE;
    texturingState.env[0].combineAlpha = GL_MODULATE;
    texturingState.env[0].src0RGB = GL_TEXTURE0;
    texturingState.env[0].src1RGB = GL_PRIMARY_COLOR;
    texturingState.env[0].src2RGB = GL_PRIMARY_COLOR;
    texturingState.env[0].src0Alpha = GL_TEXTURE0;
    texturingState.env[0].src1Alpha = GL_PRIMARY_COLOR;
    texturingState.env[0].src2Alpha = GL_PRIMARY_COLOR;
    texturingState.env[0].operand0RGB = 0;
    texturingState.env[0].operand1RGB = 0;
    texturingState.env[0].operand2RGB = 0;
    texturingState.env[0].operand0Alpha = 0;
    texturingState.env[0].operand1Alpha = 0;
    texturingState.env[0].operand2Alpha = 0;

    for (i = 1; i < NUM_TEXENV; i++)
    {
        texturingState.env[i].constant = 0xffffffff;
        texturingState.env[i].combineRGB = GL_REPLACE;
        texturingState.env[i].combineAlpha = GL_REPLACE;
        texturingState.env[i].src0RGB = GL_PREVIOUS;
        texturingState.env[i].src1RGB = GL_PRIMARY_COLOR;
        texturingState.env[i].src2RGB = GL_PRIMARY_COLOR;
        texturingState.env[i].src0Alpha = GL_PREVIOUS;
        texturingState.env[i].src1Alpha = GL_PRIMARY_COLOR;
        texturingState.env[i].src2Alpha = GL_PRIMARY_COLOR;
        texturingState.env[i].operand0RGB = 0;
        texturingState.env[i].operand1RGB = 0;
        texturingState.env[i].operand2RGB = 0;
        texturingState.env[i].operand0Alpha = 0;
        texturingState.env[i].operand1Alpha = 0;
        texturingState.env[i].operand2Alpha = 0;
    }

    for (i = 1; i < NUM_TEXUNITS; i++)
    {
        texturingState.texUnits[i].boundTexture = NULL;
    }

    vertexArraysState.numAttribs = 0;
    vertexArraysState.vertexSize = 0;

    /* TODO: init stencilState */

    dirtyState = 0xffffffff;
    enableState = 0x00000000;
    dirtyMatrices = 0xff;
    dirtyTexUnits = 0xff;
    dirtyTexEnv = 0xff;

    /* TODO: initialize matrices */

    boundBuffer = NULL;
    clearColor = glMakeRgba8CTR(0xff, 0xff, 0xff, 0xff);
    vsyncWait = GL_TRUE;

    for (i = 0; i < CTRGL_TIMEOUT_MAX_; i++)
        timeout[i] = U64_MAX;

    timeoutHandler = NULL;

    gpuCmdSize = 0;
    gpuCmd = NULL;
    gpuCmdRight = NULL;
}

void ctrglExit(void)
{
    /* FIXME: take the cleanup a bit more seriously... */
}

void ctrglAllocateCommandBuffers(GLsize size, GLuint count)
{
    gpuCmdSize = size;

    gpuCmd = (u32*)linearAlloc(gpuCmdSize * 4);

    if (count > 1)
        gpuCmdRight = (u32*)linearAlloc(gpuCmdSize * 4);
    else
        gpuCmdRight = NULL;
}

void ctrglGetCommandBuffers(u32* size, u32** gpuCmd_, u32** gpuCmdRight_)
{
    *size = gpuCmdSize;
    *gpuCmd_ = gpuCmd;
    *gpuCmdRight_ = gpuCmdRight;
}

void ctrglGetCommandBufferUtilization(u32* size, u32* used)
{
    GPUCMD_GetBuffer(NULL, size, used);
}

void ctrglResetGPU(void)
{
    GPU_Reset(NULL, gpuCmd, gpuCmdSize);
}

void ctrglSetTimeout(CTRGLtimeoutType type, u64 nanoseconds)
{
    timeout[type] = nanoseconds;
}

void ctrglSetTimeoutHandler(CTRGLtimeoutHandler handler)
{
    timeoutHandler = handler;
}

void ctrglBeginRendering(void)
{
    dirtyState |= (GL_CULL_FACE | GL_STENCIL_TEST | GL_BLEND | GL_ALPHA_TEST | GL_DEPTH_TEST
            | GL_SHADER_PROGRAM_CTR | GL_TEXTURING_CTR | GL_VERTEX_ARRAYS_CTR);

    GPUCMD_SetBufferOffset(0);
    bufferMatrixListLength = 0;

    GPU_SetViewport(
        (u32*) osConvertVirtToPhys((u32) gpuDepthBuffer),
        (u32*) osConvertVirtToPhys((u32) gpuFrameBuffer),
        0, 0, 240 * 2, 400);

    gpuDepthRange(0.0f, 1.0f);
}

void ctrglFlushState(uint32_t mask)
{
    mask &= dirtyState;

    /* the order of these seems to be extremely fragile */

    if (mask & GL_CULL_FACE)
        setUpCulling();

    if (mask & GL_STENCIL_TEST)
        setUpStencil();

    if (mask & GL_BLEND)
        setUpBlending();

    if (mask & GL_ALPHA_TEST)
        setUpAlphaTest();

    if (mask & GL_DEPTH_TEST)
    {
        setUpDepthTest();
        GPUCMD_AddSingleParam(0x00010062, 0); 
        GPUCMD_AddSingleParam(0x000F0118, 0);
    }

    if (mask & GL_SHADER_PROGRAM_CTR)
        setUpShaders();

    if (mask & GL_TEXTURING_CTR)
        setUpTexturing();

    if (mask & GL_VERTEX_ARRAYS_CTR)
        setUpVertexArrays();

    dirtyState &= ~mask;
}

void ctrglFinishRendering()
{
    GPUCMD_Finalize();
    GPU_FinishDrawing();

    if (stereoState.enabled)
    {
        /* for more information about stereo rendering:
            http://doc-ok.org/?p=77
            http://developer.download.nvidia.com/presentations/2009/GDC/GDC09-3DVision-The_In_and_Out.pdf
        */

        GLmat4x4 adjustmentMatrix;
        loadIdentity4x4((float*) adjustmentMatrix);

        //new and exciting 3D !
        //make a copy of left gpu buffer
        u32 offset; GPUCMD_GetBuffer(NULL, NULL, &offset);
        memcpy(gpuCmdRight, gpuCmd, offset*4);

        //adjust left gpu buffer fo 3D !
        adjustBufferMatrices(adjustmentMatrix, stereoState.interaxial * (0.5f));

        //draw left framebuffer
        GPUCMD_FlushAndRun(NULL);

        //while GPU starts drawing the left buffer, adjust right one for 3D !
        GPUCMD_SetBuffer(gpuCmdRight, gpuCmdSize, offset);
        adjustBufferMatrices(adjustmentMatrix, stereoState.interaxial * (-0.5f));

        //we wait for the left buffer to finish drawing
        waitEvent(GSPEVENT_P3D, CTRGL_TIMEOUT_P3D);
        GX_SetDisplayTransfer(NULL, gpuFrameBuffer, 0x019001E0, (u32*)gfxGetFramebuffer(GFX_TOP, GFX_LEFT, NULL, NULL), 0x019001E0, 0x01001000);
        waitEvent(GSPEVENT_PPF, CTRGL_TIMEOUT_PPF);

        //we draw the right buffer, wait for it to finish and then switch back to left one
        //clear the screen
        GX_SetMemoryFill(NULL, gpuFrameBuffer, clearColor, &gpuFrameBuffer[0x2EE00], 0x201,
                (u32*)gpuDepthBuffer, 0xffffffff, &gpuDepthBuffer[0x2EE00], 0x201);
        waitEvent(GSPEVENT_PSC0, CTRGL_TIMEOUT_PSC0);

        //draw the right framebuffer
        GPUCMD_FlushAndRun(NULL);
        waitEvent(GSPEVENT_P3D, CTRGL_TIMEOUT_P3D);

        //transfer from GPU output buffer to actual framebuffer
        GX_SetDisplayTransfer(NULL, gpuFrameBuffer, 0x019001E0,
                (u32*)gfxGetFramebuffer(GFX_TOP, GFX_RIGHT, NULL, NULL),
                0x019001E0, 0x01001000);
        waitEvent(GSPEVENT_PPF, CTRGL_TIMEOUT_PPF);

        GPUCMD_SetBuffer(gpuCmd, gpuCmdSize, 0);
    }
    else
    {
        GPUCMD_FlushAndRun(NULL);
        waitEvent(GSPEVENT_P3D, CTRGL_TIMEOUT_P3D);

        /* transfer from PICA framebuffer to CTR framebuffer */
        GX_SetDisplayTransfer(NULL, gpuFrameBuffer, 0x019001E0,
                (u32*)gfxGetFramebuffer(GFX_TOP, GFX_LEFT, NULL, NULL),
                0x019001E0, 0x01001000);
        waitEvent(GSPEVENT_PPF, CTRGL_TIMEOUT_PPF);
    }

    /* glClear(GL_COLOR_BIT | GL_DEPTH_BIT) */
    GX_SetMemoryFill(NULL, gpuFrameBuffer, clearColor, &gpuFrameBuffer[0x2EE00], 0x201,
            (u32*)gpuDepthBuffer, 0xffffffff, &gpuDepthBuffer[0x2EE00], 0x201);
    waitEvent(GSPEVENT_PSC0, CTRGL_TIMEOUT_PSC0);

    gfxSwapBuffersGpu();

    if (vsyncWait)
        gspWaitForEvent(GSPEVENT_VBlank0, true);
}
