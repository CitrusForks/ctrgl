/*
    Boost Software License - Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

#ifndef CTR_GL_C
#error This is a private CTRGL implementation file. Please use #include <gl.h> instead.
#endif

extern Handle gspEvents[GSPEVENT_MAX];

static u32 f32tof24(float f)
{
    if(!f)return 0;
    u32 v=*((u32*)&f);
    u8 s=v>>31;
    u32 exp=((v>>23)&0xFF)-0x40;
    u32 man=(v>>7)&0xFFFF;

    if(exp>=0)return man|(exp<<16)|(s<<23);
    else return s<<23;
}

static GLubyte clampf2ubyte(GLclampf value)
{
    if (value < 0.0f)
        return 0;
    else if (value > 1.0f)
        return 255;
    else
        return (GLubyte)(value * 255.0f);
}

static void gpuDepthRange(float nearVal, float farVal)
{
    GPUCMD_AddSingleParam(0x000F006D, 0x00000001); //?
    GPUCMD_AddSingleParam(0x000F004D, f32tof24(nearVal-farVal));   // seems more like it
    GPUCMD_AddSingleParam(0x000F004E, f32tof24(nearVal));
}

static void gpuDrawArrayDirectly(GPU_Primitive_t primitive, u8* data, u32 n)
{
    //set attribute buffer address
    GPUCMD_AddSingleParam(0x000F0200, (osConvertVirtToPhys((u32)data))>>3);
    //set primitive type
    GPUCMD_AddSingleParam(0x0002025E, primitive);
    GPUCMD_AddSingleParam(0x0002025F, 0x00000001);
    //index buffer not used for drawArrays but 0x000F0227 still required
    GPUCMD_AddSingleParam(0x000F0227, 0x80000000);
    //pass number of vertices
    GPUCMD_AddSingleParam(0x000F0228, n);

    GPUCMD_AddSingleParam(0x00010253, 0x00000001);

    GPUCMD_AddSingleParam(0x00010245, 0x00000000);
    GPUCMD_AddSingleParam(0x000F022E, 0x00000001);
    GPUCMD_AddSingleParam(0x0008025E, 0x00000000);      // post-kick nop
    GPUCMD_AddSingleParam(0x0008025E, 0x00000000);      // post-kick nop #2
    GPUCMD_AddSingleParam(0x00010245, 0x00000001);
    GPUCMD_AddSingleParam(0x000F0231, 0x00000001);

    GPUCMD_AddSingleParam(0x000F0111, 0x00000001); //breaks stuff
}

static void gpuSetTexture(int unit, void* data, u16 width, u16 height, u32 param, GPU_TEXCOLOR colorType)
{
    switch (unit)
    {
        case 0:
            GPUCMD_AddSingleParam(0x000F008E, colorType);
            GPUCMD_AddSingleParam(0x000F0085, ((u32)data)>>3);
            GPUCMD_AddSingleParam(0x000F0082, (width<<16)|height);
            GPUCMD_AddSingleParam(0x000F0083, param);
            break;

        case 1:
            GPUCMD_AddSingleParam(0x000F0096, colorType);
            GPUCMD_AddSingleParam(0x000F0095, ((u32)data)>>3);
            GPUCMD_AddSingleParam(0x000F0092, (width<<16)|height);
            GPUCMD_AddSingleParam(0x000F0093, param);
            break;

        case 2:
            GPUCMD_AddSingleParam(0x000F009E, colorType);
            GPUCMD_AddSingleParam(0x000F009D, ((u32)data)>>3);
            GPUCMD_AddSingleParam(0x000F009A, (width<<16)|height);
            GPUCMD_AddSingleParam(0x000F009B, param);
            break;
    }
}

void waitEvent(int gspEventId, CTRGLtimeoutType timeoutType)
{
    s32 ret = svcWaitSynchronization(gspEvents[gspEventId], timeout[timeoutType]);

    if (ret == 0)
        svcClearEvent(gspEvents[gspEventId]);
    else if (timeoutHandler)
        timeoutHandler(timeoutType);
}
